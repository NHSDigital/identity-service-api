steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.8'
    inputs:
      versionSpec: 3.8
        
  - template: ../components/setup-utils.yml
    parameters:
      serviceName: $(SERVICE_NAME)


  - task: DownloadSecureFile@1
    name: aws_config
    inputs:
      secureFile: ptl_aws_config

  - bash: |
      mkdir -p ~/.aws
      mv $(aws_config.secureFilePath) ~/.aws/config
      chmod 400 ~/.aws/config
    displayName: "Get AWS config"

  - bash: |
      set -euo pipefail
      
      for secret_name in APIGEE_OTP_KEY \
                         APIGEE_PASSWORD \
                         ; do
          secret_id="ptl/azure-devops/apigee-nonprod/${secret_name}"
          secret_details=$(aws --profile apm_ptl secretsmanager get-secret-value --secret-id ${secret_id})
          secret_value=$(echo $secret_details | jq -re .SecretString)
          echo "##vso[task.setvariable variable=${secret_name};issecret=true]${secret_value}";
          unset secret_id secret_details secret_value
      done
    displayName: 'Get secret parameters from AWS'

  - bash: |
      set -euo pipefail
      
      export SERVICE_ARTIFACT_NAME=`ls $(Pipeline.Workspace)/$(SERVICE_NAME)`
      echo "##vso[task.setvariable variable=SERVICE_ARTIFACT_NAME]$SERVICE_ARTIFACT_NAME"

      # AWS cli can handle getting up to 10 params in a single call.
      params=$(aws --profile apm_ptl ssm get-parameters --names \
                /ptl/azure-devops/apigee-nonprod/APIGEE_USERNAME \
                | jq -cre .Parameters[]);
      for param in ${params}; do
          _apply_param() {
              # name_parts is an array strings from splitting aws param path on forward-slash
              local name_parts=( $(echo $param | jq -cre .Name | tr "/" " ") )
              # name is the final string of that array
              local name=${name_parts[$((${#name_parts[@]} - 1))]}
              local value=$(echo $param | jq -cre .Value)
              echo "##vso[task.setvariable variable=${name}]${value}"
          }
          _apply_param
      done
    displayName: 'Get non-secret parameters from AWS'

  - bash: |
      set -euo pipefail
      
      cd utils
      
      poetry run python scripts/template.py '{"VARIABLES_KVM": "$(VARIABLES_KVM)"}' --file=$(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/proxies/live/apiproxy/policies/KeyValueMapOperations.GetVariables.xml > /tmp/live.xml
      mv /tmp/live.xml $(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/proxies/live/apiproxy/policies/KeyValueMapOperations.GetVariables.xml
      
      poetry run python scripts/template.py '{"ENCRYPTED_VARIABLES_KVM": "$(ENCRYPTED_VARIABLES_KVM)"}' --file=$(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/proxies/live/apiproxy/policies/KeyValueMapOperations.GetSecureVariables.xml > /tmp/live.xml
      mv /tmp/live.xml $(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/proxies/live/apiproxy/policies/KeyValueMapOperations.GetSecureVariables.xml
      
      poetry run python scripts/template.py '{"IDENTITY_TARGET_SERVER": "$(IDENTITY_TARGET_SERVER)"}' --file=$(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/proxies/live/apiproxy/targets/identity-server.xml > /tmp/live.xml
      mv /tmp/live.xml $(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/proxies/live/apiproxy/targets/identity-server.xml
      
      poetry run python scripts/template.py '{"IDENTITY_TARGET_SERVER": "$(IDENTITY_TARGET_SERVER)"}' --file=$(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/proxies/live/apiproxy/policies/ServiceCallout.GetJWKS.xml > /tmp/live.xml
      mv /tmp/live.xml $(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/proxies/live/apiproxy/policies/ServiceCallout.GetJWKS.xml
      
      poetry run python scripts/template.py '{"IDENTITY_TARGET_SERVER": "$(IDENTITY_TARGET_SERVER)"}' --file=$(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/proxies/live/apiproxy/policies/ServiceCallout.PostToken.xml > /tmp/live.xml
      mv /tmp/live.xml $(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/proxies/live/apiproxy/policies/ServiceCallout.PostToken.xml
    displayName: 'Set KVM and Target Server'
