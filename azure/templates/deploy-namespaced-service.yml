steps:
  - template: ../components/setup-terraform.yml
    parameters:
      useCustomTerraform: $(USE_CUSTOM_TERRAFORM)

  - template: ../components/get-mfa-code.yml
    parameters:
      serviceName: $(SERVICE_NAME)
      apigeeOTPKey: $(APIGEE_OTP_KEY)

  - template: ../components/get-access-token.yml
    parameters:
      serviceName: $(SERVICE_NAME)
      apigeeUsername: $(APIGEE_USERNAME)
      apigeePassword: $(APIGEE_PASSWORD)

  - bash: |
      set -euo pipefail
      
      echo "!!! If you get an error here, it is because '$(SERVICE_NAME)' is not the source alias name of the artifact"
      export SERVICE_ARTIFACT_NAME=`ls $(Pipeline.Workspace)/$(SERVICE_NAME)`
      
      if [ "$(NAMESPACE)" == "from_branchname" ]; then
        # Change reference to get from right area
        export NAMESPACE=$(BRANCH_NAME)
      else
        export NAMESPACE="$(NAMESPACE)"
      fi
      
      if [ $(FORCE_SANDBOX) == "true" ]; then
        export NAMESPACE="$NAMESPACE-sandbox"
      fi
      
      echo "Deploying $SERVICE_ARTIFACT_NAME to $(SERVICE_BASE_PATH) on $(ENV_URL) in namespace $NAMESPACE"
      
      echo "##vso[task.setvariable variable=_NAMESPACE]$NAMESPACE"
      echo "##vso[task.setvariable variable=SERVICE_ARTIFACT_NAME]$SERVICE_ARTIFACT_NAME"
    displayName: 'Deploy $(SERVICE_NAME) > Deploy Info'

  - bash: |
      set -euo pipefail
      
      export PROXIES_DIR="$(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/proxies"
      export SERVICE_BASE_PATH="$(SERVICE_BASE_PATH)-$(_NAMESPACE)"
      export APIGEE_ENVIRONMENT="$(APIGEE_ENVIRONMENT)"
      
      make --no-print-directory -C utils/ansible template-proxies
    displayName: 'Deploy $(SERVICE_NAME) > Template Proxies'

  - bash: |
      set -euo pipefail

      export SERVICE_DIR=`realpath "$(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)"`
      export PROXY_DIR="$SERVICE_DIR/proxies/$(PROXY_NAME)"
      export SERVICE_NAME="$(SERVICE_NAME)-$(APIGEE_ENVIRONMENT)-$(_NAMESPACE)"
      export SERVICE_BASE_PATH="$(SERVICE_BASE_PATH)"
      export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"

      cd utils
      poetry run ansible-playbook ansible/deploy-apigee-proxy.yml
    displayName: 'Deploy $(SERVICE_NAME) > Deploy Proxy'

  - bash: |
      set -euo pipefail

      if [ -d  $(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/terraform ]; then
      # Set up a logging directory and logfile
      mkdir logs
      touch logs/terraform-crash.log

      # Move to terraform context of this service
      cd $(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/terraform

      cat > ./tmp.tfvars.tmp << '_EOF'
      apigee_token = "${API_ACCESS_TOKEN}"
      apigee_environment = "$(APIGEE_ENVIRONMENT)"
      apigee_organization = "$(APIGEE_ORGANIZATION)"
      namespace = "-$(_NAMESPACE)"
      force_sandbox = "$(FORCE_SANDBOX)"
      covid-19-testing-channel-availability-host = "$(COVID_19_TCA_HOST)"
      dps-submission-api-host = "$(DPS_SUBMISSION_API_HOST)"
      _EOF

      export API_ACCESS_TOKEN="$(secret.AccessToken)"

      envsubst < ./tmp.tfvars.tmp > ./tmp.tfvars

      terraform init -no-color -backend-config="storage_account_name=hawdonnhsddevopssacc" -backend-config="container_name=$(APIGEE_ORGANIZATION)" -backend-config="key=$(APIGEE_ENVIRONMENT)-$(SERVICE_NAME)-$(_NAMESPACE).tfstate" -backend-config="sas_token=$(SAS_TOKEN)"

      export TERRAFORM_SERVICE_NAME="$(SERVICE_NAME)"

      if [ "$(SERVICE_NAME)" == "personal-demographics" ]; then
        export TERRAFORM_SERVICE_NAME="personal-demographics-service"
      fi

      # Uncomment this if you remove something from terraform management and need
      # to blast the state to stop terraform attempting to destroy it
      terraform state rm "module.$TERRAFORM_SERVICE_NAME"

      terraform plan -input=false -no-color -var-file=./tmp.tfvars -out tfplan.out

      TF_LOG_PATH=$(System.DefaultWorkingDirectory)/logs/terraform-crash.log terraform apply -no-color -auto-approve tfplan.out
      rm tfplan.out
      fi
    displayName: 'Deploy $(SERVICE_NAME) > Deploy Product'
