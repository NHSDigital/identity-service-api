steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.8'
    inputs:
      versionSpec: 3.8

  - template: ../components/setup-utils.yml
    parameters:
      NAME: $(SERVICE_NAME)

  - template: ../components/setup-terraform.yml
    parameters:
      NAME: $(SERVICE_NAME)

  - template: ../components/get-mfa-code.yml
    parameters:
      NAME: $(SERVICE_NAME)

  - template: ../components/get-access-token.yml
    parameters:
      NAME: $(SERVICE_NAME)

  - bash: |
      set -euo pipefail
      
      echo "!!! If you get an error here, it is because '$(SERVICE_NAME)' is not the source alias name of the artifact"
      export SERVICE_ARTIFACT_NAME=`ls $(Pipeline.Workspace)/$(SERVICE_NAME)`
      
      if [ "$(NAMESPACE)" == "from_branchname" ]; then
        # Change reference to get from right area
        export NAMESPACE=$(Build.SourceBranchName)
      else
        export NAMESPACE="$(NAMESPACE)"
      fi
      
      if [ $(FORCE_SANDBOX) == "true" ]; then
        export NAMESPACE="$NAMESPACE-sandbox"
      fi
      
      echo "Deploying $SERVICE_ARTIFACT_NAME to $(SERVICE_BASE_PATH) on $(ENV_URL) in namespace $NAMESPACE"
      
      echo "##vso[task.setvariable variable=_NAMESPACE]$NAMESPACE"
      echo "##vso[task.setvariable variable=SERVICE_ARTIFACT_NAME]$SERVICE_ARTIFACT_NAME"
    displayName: 'Deploy $(SERVICE_NAME) > Deploy Info'

  - bash: |
      set -euo pipefail
      
      export PROXIES_DIR="$(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/proxies"
      export SERVICE_BASE_PATH="$(SERVICE_BASE_PATH)-$(_NAMESPACE)"
      export APIGEE_ENVIRONMENT="$(APIGEE_ENVIRONMENT)"
      
      make --no-print-directory -C utils/ansible template-proxies
    displayName: 'Deploy $(SERVICE_NAME) > Template Proxies'

  - bash: |
      set -euo pipefail
      
      # Set up a logging directory and logfile
      mkdir logs
      touch logs/terraform-crash.log
      
      # Move to terraform context of this service
      cd $(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/terraform
      
      
      cat > ./tmp.tfvars.tmp <<'_EOF'
      apigee_token = "${API_ACCESS_TOKEN}"
      apigee_environment = "$(APIGEE_ENVIRONMENT)"
      apigee_organization = "$(APIGEE_ORGANIZATION)"
      namespace = "-$(_NAMESPACE)"
      force_sandbox = "$(FORCE_SANDBOX)"
      status_cake_username = "$(STATUS_CAKE_USERNAME)"
      status_cake_api_key = "$(STATUS_CAKE_API_KEY)"
      status_cake_contact_group = "$(STATUS_CAKE_CONTACT_GROUP)"
      covid-19-testing-channel-availability-host = "$(COVID_19_TCA_HOST)"
      dps-submission-api-host = "$(DPS_SUBMISSION_API_HOST)"
      _EOF
      
      export API_ACCESS_TOKEN="$(secret.AccessToken)"
      
      envsubst < ./tmp.tfvars.tmp > ./tmp.tfvars
      
      terraform init -no-color -backend-config="storage_account_name=hawdonnhsddevopssacc" -backend-config="container_name=$(APIGEE_ORGANIZATION)" -backend-config="key=$(APIGEE_ENVIRONMENT)-$(SERVICE_NAME)-$(_NAMESPACE).tfstate" -backend-config="sas_token=$(SAS_TOKEN)"
      
      terraform plan -input=false -no-color -var-file=./tmp.tfvars -out tfplan.out
      
      TF_LOG_PATH=$(System.DefaultWorkingDirectory)/logs/terraform-crash.log terraform apply -no-color -auto-approve tfplan.out
      rm tfplan.out
    displayName: 'Deploy $(SERVICE_NAME) > Deploy'
