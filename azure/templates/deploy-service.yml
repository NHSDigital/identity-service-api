steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.8'
    inputs:
      versionSpec: 3.8

  - template: ../components/setup-utils.yml

  - template: ../components/setup-terraform.yml

  - template: ../components/get-mfa-code.yml

  - template: ../components/get-access-token.yml

  - bash: |
      set -euo pipefail
      
      echo "!!! If you get an error here, it is because '$(SERVICE_NAME)' is not the source alias name of the artifact"
      export SERVICE_ARTIFACT_NAME=`ls $(Pipeline.Workspace)/$(SERVICE_NAME)`
      echo "##vso[task.setvariable variable=SERVICE_ARTIFACT_NAME]$SERVICE_ARTIFACT_NAME"
      echo "Deploying $SERVICE_ARTIFACT_NAME to $(SERVICE_BASE_PATH) on $(ENV_URL)"
      echo "Using custom terraform: $(USE_CUSTOM_TERRAFORM)"
    displayName: 'Deploy $(SERVICE_NAME) > Deploy Info'

  - bash: |
      set -euo pipefail
    
      export PROXIES_DIR="$(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/proxies"
      export SERVICE_BASE_PATH="$(SERVICE_BASE_PATH)"
      export APIGEE_ENVIRONMENT="$(APIGEE_ENVIRONMENT)"
      
      make --no-print-directory -C utils/ansible template-proxies
    displayName: 'Deploy $(SERVICE_NAME) > template proxies'

  - bash: |
      set -euo pipefail
      
      cd $(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/terraform
      
      terraform init -no-color -backend-config="storage_account_name=hawdonnhsddevopssacc" -backend-config="container_name=$(APIGEE_ORGANIZATION)" -backend-config="key=$(APIGEE_ENVIRONMENT)-$(SERVICE_NAME).tfstate" -backend-config="sas_token=$(SAS_TOKEN)"
      
      export API_ACCESS_TOKEN="$(secret.AccessToken)"
      
      cat > ./tmp.tfvars.tmp <<'_EOF'
      apigee_token = "${API_ACCESS_TOKEN}"
      apigee_environment = "$(APIGEE_ENVIRONMENT)"
      apigee_organization = "$(APIGEE_ORGANIZATION)"
      namespace = ""
      status_cake_username = "$(STATUS_CAKE_USERNAME)"
      status_cake_api_key = "$(STATUS_CAKE_API_KEY)"
      status_cake_contact_group = "$(STATUS_CAKE_CONTACT_GROUP)"
      covid-19-testing-channel-availability-host = "$(COVID_19_TCA_HOST)"
      dps-submission-api-host = "$(DPS_SUBMISSION_API_HOST)"
      _EOF
      
      envsubst < ./tmp.tfvars.tmp > ./tmp.tfvars
      
      terraform plan -input=false -no-color  -var-file=./tmp.tfvars -out tfplan.out
      terraform apply -no-color -auto-approve tfplan.out
    displayName: 'Deploy $(SERVICE_NAME) > Deploy'
  
  - bash: |
      set -euo pipefail
      
      # TODO re-enable once i figure out how to get alternative SANs to work
      # curl --fail -I $(CURL_ARGUMENTS)
    displayName: 'Deploy $(SERVICE_NAME) > Smoke test'