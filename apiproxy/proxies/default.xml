<ProxyEndpoint name="default">
    <Description/>
    <FaultRules/>
    <PreFlow name="PreFlow">
        <Request/>
        <Response/>
    </PreFlow>
    <PostFlow name="PostFlow">
        <Request/>
        <Response/>
    </PostFlow>
    <Flows>
        <Flow name="Flow.GetAuthorization">
            <Description>OAuth Authorization Endpoint</Description>
            <Request>
                <Step>
                    <Name>VerifyAPIKey.ClientId</Name>
                </Step>
                <Step>
                    <Name>RaiseFault.CheckRedirectUri</Name>
                    <Condition>request.queryparam.redirect_uri != verifyapikey.VerifyAPIKey.ClientId.redirection_uris</Condition>
                </Step>
                <Step>
                    <Name>KeyValueMapOperations.GetApigeeOauthCredentials</Name>
                </Step>
                <Step>
                    <Name>AssignMessage.GenerateState</Name>
                </Step>
                <Step>
                    <Name>JavaScript.CreateCacheEntry</Name>
                </Step>
                <Step>
                    <Name>PopulateCache.OriginalClientInfo</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>AssignMessage.SetAuthorizationRedirect</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/authorize") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="Flow.PostToken">
            <Description>OAuth Token Endpoint</Description>
            <Request>
                <Step>
                    <Name>BasicAuthentication.Decode</Name>
                </Step>
                <Step>
                    <Name>KeyValueMapOperations.GetApigeeOauthCredentials</Name>
                </Step>
                <Step>
                    <Name>BasicAuthentication.Encode</Name>
                </Step>
                <Step>
                    <Name>ServiceCallout.PostToken</Name>
                </Step>
                <Step>
                    <Name>ExtractVariables.AccessToken</Name>
                </Step>
                <Step>
                    <Name>AssignMessage.SetExternalAuthorizationStatus</Name>
                </Step>
                <Step>
                    <Name>AssignMessage.SetAuthorization</Name>
                </Step>
                <Step>
                    <Name>OAuthV2.GenerateAccessToken</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>AssignMessage.GenerateTokenResponse</Name>
                </Step>
                <Step>
                    <Name>AssignMessage.SetCorsHeaders</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/token") and (request.verb = "POST") and (request.formparam.grant_type = "authorization_code")</Condition>
        </Flow>
        <Flow name="Flow.GetCallback">
            <Description>Flow to catch the Code response</Description>
            <Request>
                <Step>
                    <Name>LookupCache.OriginalClientInfo</Name>
                </Step>
                <Step>
                    <Name>ExtractVariables.ReadCacheJson</Name>
                </Step>
                <Step>
                    <Name>AssignMessage.SetExternalAuthorizationStatus</Name>
                </Step>
                <Step>
                    <Name>OAuthV2.GenerateAuthCode</Name>
                </Step>
            </Request>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/callback") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="Flow.GetUserInfo">
            <Description/>
            <Request>
                <Step>
                    <Name>OAuthV2.VerifyAccessToken</Name>
                </Step>
            </Request>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/userinfo") and (request.verb = "GET" || request.verb = "POST" )</Condition>
        </Flow>
        <Flow name="Flow.GetWellKnown">
            <Description/>
            <Request/>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/.well-known/*") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="Flow.OptionsCors">
            <Description/>
            <Request/>
            <Response>
                <Step>
                    <Name>AssignMessage.SetCorsHeaders</Name>
                </Step>
            </Response>
            <Condition>request.verb == "OPTIONS" AND request.header.origin != null AND request.header.Access-Control-Request-Method != null</Condition>
        </Flow>
        <Flow name="Flow.CatchAll">
            <Description/>
            <Request>
                <Step>
                    <Name>RaiseFault.NotFound</Name>
                </Step>
            </Request>
            <Response/>
            <Condition>1=1</Condition>
        </Flow>
    </Flows>
    <HTTPProxyConnection>
        <!-- Cannot be parameterised / dynamic as it's part of callback URI registered with the identity provider -->
        <BasePath>/oauth2/v1</BasePath>
        <Properties/>
        <VirtualHost>secure</VirtualHost>
    </HTTPProxyConnection>
    <RouteRule name="identityRoute">
        <Condition>(proxy.pathsuffix MatchesPath "/userinfo") or (proxy.pathsuffix MatchesPath "/.well-known/*")</Condition>
        <TargetEndpoint>identity-server</TargetEndpoint>
    </RouteRule>
    <RouteRule name="loopbackRoute"/>
</ProxyEndpoint>
