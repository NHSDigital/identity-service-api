<ProxyEndpoint name="default">
    <Description/>
    <FaultRules>
      <FaultRule name="allow_raisefaults">
        <!-- Fault rule to prevent the DefaultFaultRule from executing when
        RaiseFault is used in a flow -->
        <Step>
          <Name>AssignMessage.CatchallErrorMessage</Name>
          <Condition>(fault.name NotEquals "RaiseFault")</Condition>
        </Step>
        <Condition>(fault.name Equals "RaiseFault")</Condition>
      </FaultRule>
      <FaultRule name="not_subscribed">
        <Condition>(fault.name Equals "InvalidApiKeyForGivenResource")</Condition>
        <Step>
          <Name>AssignMessage.InvalidApiKeyForGivenResource</Name>
        </Step>
      </FaultRule>
      <FaultRule name="company_status_not_active">
        <Condition>(fault.name Equals "CompanyStatusNotActive")</Condition>
        <Step>
          <Name>AssignMessage.CompanyStatusNotActive</Name>
        </Step>
      </FaultRule>
      <FaultRule name="developer_status_not_active">
        <Condition>(fault.name Equals "DeveloperStatusNotActive")</Condition>
        <Step>
          <Name>AssignMessage.DeveloperStatusNotActive</Name>
        </Step>
      </FaultRule>
      <FaultRule name="invalid_client_app_not_approved">
        <Condition>(fault.name Equals "invalid_client-app_not_approved")</Condition>
        <Step>
          <Name>AssignMessage.InvalidClientAppNotApproved</Name>
        </Step>
      </FaultRule>
      <FaultRule name="verify_api_key">
        <Condition>(fault.name Equals "InvalidApiKey") and !(proxy.pathsuffix MatchesPath "/token")</Condition>
        <Step>
          <Name>AssignMessage.InvalidApiKey</Name>
        </Step>
      </FaultRule>
      <FaultRule name="invalid_auth_code_sim">
        <Condition>(oauthV2.OAuthV2.GenerateAccessTokenSimulatedAuth.fault.cause Equals "Invalid Authorization Code")</Condition>
        <Step>
            <Name>AssignMessage.InvalidAuthorizationCode</Name>
        </Step>
      </FaultRule>
      <FaultRule name="invalid_auth_code">
          <Condition>(oauthV2.OAuthV2.GenerateAccessToken.fault.cause Equals "Invalid Authorization Code")</Condition>
          <Step>
              <Name>AssignMessage.InvalidAuthorizationCode</Name>
          </Step>
      </FaultRule>
      <FaultRule name="verify_api_key_and_secret">
        <Condition>(fault.name Equals "InvalidApiKey") and (proxy.pathsuffix MatchesPath "/token")</Condition>
        <Step>
          <Name>AssignMessage.InvalidApiKeyOrSecret</Name>
        </Step>
      </FaultRule>
      <FaultRule name="missing_api_key">
        <Condition>(fault.name Equals "FailedToResolveAPIKey")</Condition>
        <Step>
          <Name>AssignMessage.MissingApiKey</Name>
        </Step>
      </FaultRule>
      <FaultRule name="jwt_algorithm">
        <Condition>(JWT.failed Equals true) And (fault.name Equals "AlgorithmMismatch")</Condition>
        <Step>
          <Name>AssignMessage.UnsupportedJWTAlgorithmError</Name>
        </Step>
      </FaultRule>
      <FaultRule name="expired_jwt">
        <Condition>(JWT.failed Equals true) And (fault.name Equals "TokenExpired")</Condition>
        <Step>
          <Name>AssignMessage.ExpiredJWTError</Name>
        </Step>
      </FaultRule>
      <FaultRule name="failed_decoding_jwt">
        <Condition>(JWT.failed Equals true) And (fault.name Equals "FailedToDecode")</Condition>
        <Step>
          <!-- DecodeJWT will throw this error where the JWT's *header* is invalid -->
          <Name>AssignMessage.FailedToDecodeJWTError</Name>
        </Step>
      </FaultRule>
      <FaultRule name="jtw_missing_alg">
        <Condition>(JWT.failed Equals true) And (fault.name Equals "FailedToDecode") And (jwt.DecodeJWT.FromClientAssertionFormParam.error Matches "Invalid JWS header: Missing JSON object member with key *alg*")</Condition>
        <Step>
          <Name>AssignMessage.MissingAlgHeader</Name>
        </Step>
      </FaultRule>
      <FaultRule name="missing_client_assertion">
        <Condition>(JWT.failed Equals true) And (fault.name Equals "FailedToResolveVariable")</Condition>
        <Step>
          <Name>AssignMessage.MissingClientAssertion</Name>
        </Step>
      </FaultRule>
      <FaultRule name="cc_verify_api_key">
        <Condition>(oauthV2.VerifyAPIKey.FromJWT.failed Equals true)</Condition>
        <Step>
          <Name>AssignMessage.ClientCredentialsInvalidSubject</Name>
        </Step>
      </FaultRule>
      <FaultRule name="cc_invalid_aud_claim">
        <Condition>(JWT.failed Equals true) and (error.message Equals "Invalid Claim: policy(VerifyJWT.ClientCredentials) claim(aud)")</Condition>
        <Step>
          <Name>AssignMessage.AudClaimInvalid</Name>
        </Step>
      </FaultRule>
      <FaultRule name="cc_no_matching_pub_key">
        <Condition>(JWT.failed Equals true) and (fault.name Equals "NoMatchingPublicKey")</Condition>
        <Step>
          <Name>AssignMessage.NoMatchingPublicKey</Name>
        </Step>
      </FaultRule>
      <FaultRule name="refresh_token_expired">
        <Condition>oauthV2.OAuthV2.GenerateRefreshToken.fault.cause Equals "Refresh Token expired"</Condition>
        <Step>
          <Name>AssignMessage.ExpiredRefreshToken</Name>
        </Step>
      </FaultRule>
      <FaultRule name="invalid_refresh_token">
        <Condition>oauthV2.OAuthV2.GenerateRefreshToken.fault.cause Equals "Invalid Refresh Token"</Condition>
        <Step>
            <Name>AssignMessage.InvalidRefreshToken</Name>
        </Step>
      </FaultRule>
      <FaultRule name="public_key_misconfigured">
        <Condition>(servicecallout.ServiceCallout.ClientCredentialsGrantGetJWKS.failed Equals true)</Condition>
        <Step>
          <Name>AssignMessage.PublicKeyMisconfigured</Name>
        </Step>
      </FaultRule>
      <FaultRule name="state_does_not_exist_in_cache">
        <Condition>extractvariables.ExtractVariables.ReadCacheJson.failed</Condition>
        <Step>
          <Name>AssignMessage.CacheKeyError</Name>
        </Step>
      </FaultRule>
    </FaultRules>
    <DefaultFaultRule>
      <Step>
        <Name>AssignMessage.CatchallErrorMessage</Name>
      </Step>
    </DefaultFaultRule>
    <PreFlow name="PreFlow">
        <Request>
          <Step>
            <Name>KeyValueMapOperations.GetVariables</Name>
          </Step>
        </Request>
        <Response/>
    </PreFlow>
    <PostFlow name="PostFlow">
      <Request/>
      <Response/>
    </PostFlow>
    <Flows>
        <Flow name="AddPayloadToPing">
            <Description />
            <Request />
              <Response>
                <Step>
                  <Name>AssignMessage.AddPayloadToPing</Name>
                </Step>
              </Response>
              <Condition>(proxy.pathsuffix MatchesPath "/_ping") and ((request.verb = "GET") or (request.verb = "HEAD"))</Condition>
        </Flow>
        <Flow name="Flow.GetAuthorization">
            <Description>OAuth Authorization Endpoint</Description>
            <Request>
                <!-- Verify the client has sent a valid Client ID -->
                <Step>
                    <Name>VerifyAPIKey.ClientId</Name>
                </Step>
                <!-- Verify the client has sent a valid redirect uri -->
                <Step>
                  <Name>RaiseFault.MissingRedirectUri</Name>
                  <Condition>request.queryparam.redirect_uri = null</Condition>
                </Step>
                <Step>
                    <Name>RaiseFault.VerifyRedirectUriQueryParam</Name>
                    <Condition>request.queryparam.redirect_uri != verifyapikey.VerifyAPIKey.ClientId.redirection_uris</Condition>
                </Step>
                <!-- Verify the client has sent a state value-->
                <Step>
                  <Name>RaiseFault.MissingState</Name>
                  <Condition>request.queryparam.state = null</Condition>
                </Step>
                <!-- Verify the client has sent a valid response type -->
                <Step>
                    <Name>RaiseFault.MissingResponseType</Name>
                    <Condition>request.queryparam.response_type = null</Condition>
                </Step>
                <Step>
                    <Name>RaiseFault.VerifyResponseType</Name>
                    <Condition>request.queryparam.response_type != "code"</Condition>
                </Step>
                <!-- Complete the rest of authorization flow-->
                <Step>
                    <Name>AssignMessage.GenerateState</Name>
                </Step>
                <Step>
                    <Name>Python.GenerateState</Name>
                </Step>
                <Step>
                    <Name>JavaScript.CreateCacheEntry</Name>
                </Step>
                <Step>
                    <Name>PopulateCache.OriginalClientInfo</Name>
                </Step>
                <Step>
                    <Name>AssignMessage.RenameQuotaVarsFromVerifyAPIKeyPolicyClientId</Name>
                </Step>
                <Step>
                    <Name>SpikeArrest</Name>
                </Step>
                <Step>
                    <Name>Quota</Name>
                </Step>
            </Request>
            <Response>
              <!-- Determine which auth redirect to return if int PR proxy-->
              <Step>
                <Name>AssignMessage.SetAuthorizationPRRedirect</Name>
                <Condition>proxy.basepath Matches "oauth2-int-pr-*"</Condition>
              </Step>
              <Step>
                <Name>AssignMessage.SetAuthorizationRedirect</Name>
                <Condition>not(proxy.basepath Matches "oauth2-int-pr-*")</Condition>
              </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/authorize") and (request.verb = "GET")</Condition>
        </Flow>
      <Flow name="Flow.PostTokenClientCredentials">
        <Description>OAuth Token Endpoint - Client Credentials</Description>
        <Request>
          <Step>
            <Name>RaiseFault.MissingOrInvalidClientAssertionType</Name>
            <Condition>(request.formparam.client_assertion_type NotEquals "urn:ietf:params:oauth:client-assertion-type:jwt-bearer")</Condition>
          </Step>
          <Step>
            <Name>DecodeJWT.FromClientAssertionFormParam</Name>
          </Step>
          <Step>
            <!-- The JWT Header may be valid, but the rest of the JWT may be malformed or missing.
              This catches that eventuality: -->
              <Name>RaiseFault.WarningDecodingJWT</Name>
              <Condition>jwt.DecodeJWT.FromClientAssertionFormParam.warning != null</Condition>
            </Step>
          <Step>
            <Name>RaiseFault.MissingKidHeader</Name>
            <Condition>(jwt.DecodeJWT.FromClientAssertionFormParam.decoded.header.kid Is null) Or (jwt.DecodeJWT.FromClientAssertionFormParam.decoded.header.kid Equals "")</Condition>
          </Step>
          <Step>
            <Name>RaiseFault.MissingOrInvalidTypHeader</Name>
            <Condition>(jwt.DecodeJWT.FromClientAssertionFormParam.decoded.header.typ Is null) Or (Not(jwt.DecodeJWT.FromClientAssertionFormParam.decoded.header.typ EqualsCaseInsensitive "jwt"))</Condition>
          </Step>
          <Step>
            <Name>RaiseFault.MissingOrInvalidIssClaim</Name>
            <Condition>(jwt.DecodeJWT.FromClientAssertionFormParam.decoded.claim.iss Is null) or (jwt.DecodeJWT.FromClientAssertionFormParam.decoded.claim.iss Equals "") or (jwt.DecodeJWT.FromClientAssertionFormParam.decoded.claim.iss NotEquals jwt.DecodeJWT.FromClientAssertionFormParam.decoded.claim.sub)</Condition>
          </Step>
          <Step>
            <Name>RaiseFault.MissingJtiClaim</Name>
            <Condition>(jwt.DecodeJWT.FromClientAssertionFormParam.decoded.claim.jti Is null) or (jwt.DecodeJWT.FromClientAssertionFormParam.decoded.claim.jti Equals "")</Condition>
          </Step>
          <Step>
            <Name>RaiseFault.MissingExpClaim</Name>
            <Condition>(jwt.DecodeJWT.FromClientAssertionFormParam.decoded.claim.exp Is null) or (jwt.DecodeJWT.FromClientAssertionFormParam.decoded.claim.exp Equals "")</Condition>
          </Step>
          <Step>
            <!-- We advise to limit expiry time to now + 5 minutes. Allowing an extra 10 seconds to mitigate edge cases: -->
            <Name>RaiseFault.ExpClaimTooLong</Name>
            <Condition>(jwt.DecodeJWT.FromClientAssertionFormParam.seconds_remaining GreaterThan 310)</Condition>
          </Step>
          <Step>
            <Name>LookupCache.JTIClaim</Name>
          </Step>
          <Step>
            <Name>RaiseFault.JTIValueExistsInCache</Name>
            <Condition>JTICachedValue = jwt.DecodeJWT.FromClientAssertionFormParam.decoded.claim.jti</Condition>
          </Step>
          <Step>
            <Name>PopulateCache.JTIClaim</Name>
          </Step>
          <Step>
            <Name>VerifyAPIKey.FromJWT</Name>
          </Step>
          <Step>
            <Name>SpikeArrest</Name>
          </Step>
          <Step>
            <Name>Quota</Name>
          </Step>
          <Step>
            <Name>Javascript.SetServiceCalloutUrl</Name>
          </Step>
          <Step>
            <Name>ServiceCallout.ClientCredentialsGrantGetJWKS</Name>
          </Step>
          <!-- Not sure this is necessary
          <Step>
            <Name>ExtractVariables.ParseJWKS</Name>
          </Step> -->
          <Step>
            <Name>VerifyJWT.ClientCredentials</Name>
          </Step>
          <Step>
            <!-- Needed because OAuthV2 'GenerateAccessToken' has to have the Client ID and Client Secret in a specific place -->
            <Name>AssignMessage.SetClientCredentials</Name>
          </Step>
          <!-- Next step allows optional REDUCTION of access_token_expiry KVM values
               using _access_token_expiry_ms form param -->
          <Step>
            <Name>AssignMessage.AccessTokenExpiryOverride</Name>
            <Condition>(request.formparam._access_token_expiry_ms != null) and (request.formparam._access_token_expiry_ms LesserThan apigee.access_token_expiry_ms)</Condition>
          </Step>
          <Step>
            <Name>OAuthV2.ClientCredentialsGenerateAccessToken</Name>
          </Step>
        </Request>
        <Response>
          <Step>
            <Name>AssignMessage.ClientCredentialsGenerateTokenResponse</Name>
          </Step>
        </Response>
        <Condition>((proxy.pathsuffix MatchesPath "/token") and (request.verb Equals "POST") and (request.formparam.grant_type Equals "client_credentials"))</Condition>
      </Flow>
      <Flow name="Flow.PostTokenAuthorizationCode">
        <Description>OAuth Token Endpoint - Authorization Code Flow</Description>
            <Request>
                <!-- Verify the Client Application using both client_id and client_secret form params -->
                <Step>
                  <Name>VerifyAPIKey.FromClientSecretFormParam</Name>
                </Step>
                <Step>
                  <Name>RaiseFault.MissingClientSecret</Name>
                  <Condition>request.formparam.client_secret = null</Condition>
                </Step>
                <Step>
                  <Name>RaiseFault.InvalidClientSecret</Name>
                  <Condition>request.formparam.client_secret != verifyapikey.VerifyAPIKey.FromClientSecretFormParam.client_secret</Condition>
                </Step>
                <!-- Verify the client has sent a valid redirect uri -->
                <Step>
                  <Name>RaiseFault.MissingRedirectUri</Name>
                  <Condition>request.formparam.redirect_uri = null</Condition>
                </Step>
                <Step>
                  <Name>RaiseFault.VerifyRedirectUriFormParam</Name>
                  <Condition>request.formparam.redirect_uri != verifyapikey.VerifyAPIKey.FromClientSecretFormParam.redirection_uris</Condition>
                </Step>
                <!-- Verify the client has sent a valid authorization code -->
                <Step>
                  <Name>RaiseFault.MissingAuthorizationCode</Name>
                  <Condition>request.formparam.code = null</Condition>
                </Step>
                <Step>
                    <Name>AssignMessage.RenameQuotaVarsFromVerifyAPIKeyPolicyFromClientSecretFormParam</Name>
                </Step>
                <Step>
                    <Name>SpikeArrest</Name>
                </Step>
                <Step>
                    <Name>Quota</Name>
                </Step>
                <Step>
                    <Name>KeyValueMapOperations.GetSecureVariables</Name>
                </Step>
                <Step>
                    <Name>ServiceCallout.PostToken</Name>
                </Step>
                <Step>
                    <Name>ExtractVariables.AccessToken</Name>
                </Step>
                <!-- Using pattern from https://community.apigee.com/questions/34110/how-can-i-store-the-results-of-the-servicecallout.html
                    Steps are:
                    1. LookupCache.JWKS: Attempt to get JWKS from cache, store in flow variable `jwks`
                    2. If this fails (`jwks` is null)
                    2a. ServiceCallout.GetJWKS: Retrieve JWKS from IdP
                    2b. PopulateCache.JWKS: Store in cache
                    2c. AssignMessage.JWKS: Assign the JWKS from the service callout to `jwks` flow variable
                    3. VerifyJWT.FromExternalIdToken: Verify the JWT using the `jwks` flow variable
                -->
                <Step>
                  <Name>LookupCache.JWKS</Name>
                </Step>
                <Step>
                  <Name>ServiceCallout.GetJWKS</Name>
                  <Condition>jwks = null</Condition>
                </Step>
                <Step>
                  <Name>PopulateCache.JWKS</Name>
                  <Condition>jwks = null</Condition>
                </Step>
                <Step>
                  <Name>AssignMessage.JWKS</Name>
                  <Condition>jwks = null</Condition>
                </Step>
                <Step>
                  <Name>VerifyJWT.FromExternalIdToken</Name>
                </Step>
                <!-- Next 3 steps allow optional REDUCTION of access_token_expiry and refresh_token_expiry  KVM values
                using _access_token_expiry_ms/_refresh_token_expiry_ms (respectively) form params -->
                <Step>
                  <Name>AssignMessage.AccessTokenExpiryOverride</Name>
                  <Condition>(request.formparam._access_token_expiry_ms != null) and (request.formparam._access_token_expiry_ms LesserThan apigee.access_token_expiry_ms)</Condition>
                </Step>
                <!-- Using JavaScript to evaluate the requested override time, due to apigee conditional failing to evaluate properly -->
                <Step>
                  <Name>JavaScript.CalculateRefreshTokenOverride</Name>
                  <Condition>request.formparam._refresh_token_expiry_ms != null</Condition>
                </Step>
                <Step>
                  <Name>AssignMessage.RefreshTokenExpiryOverride</Name>
                  <Condition>(apigee.can_override_refresh_token != null) and (apigee.can_override_refresh_token = true)</Condition>
                </Step>
                <Step>
                    <Name>OAuthV2.GenerateAccessToken</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>AssignMessage.GenerateTokenResponse</Name>
                </Step>
                <Step>
                    <Name>AssignMessage.SetCorsHeaders</Name>
                </Step>
            </Response>
            <Condition>(identity_service.simulated_idp IsNot "true") and (proxy.pathsuffix MatchesPath "/token") and (request.verb = "POST") and (request.formparam.grant_type = "authorization_code")</Condition>
      </Flow>
      <Flow name="Flow.PostTokenAuthorizationCodeSimulatedAuth">
        <Description>OAuth Token Endpoint - Authorization Code Flow - SIMULATED AUTH</Description>
            <Request>
                <!-- In the documentation we specify that the Client ID and Client Secret must be sent as form params
                However Apigee interactive documenttion ("Try it now") feature sends them as HTTP Basic Auth, so
                we will allow this, but ONLY when in 'simulated_idp' mode and when they haven't been sent in the form params -->
                <Step>
                  <Name>BasicAuthentication.DecodeClientIdAndSecret</Name>
                  <Condition>(request.header.Authorization IsNot null) and ((request.formparam.client_id Is null) or (request.formparam.client_secret Is null))</Condition>
                </Step>
                <!-- First two steps verify the Client Application using both client_id and client_secret form params -->
                <Step>
                  <Name>VerifyAPIKey.FromClientSecretFormParam</Name>
                </Step>
                <Step>
                  <Name>RaiseFault.MissingClientSecret</Name>
                  <Condition>request.formparam.client_secret = null</Condition>
                </Step>
                <Step>
                  <Name>RaiseFault.InvalidClientSecret</Name>
                  <Condition>request.formparam.client_secret != verifyapikey.VerifyAPIKey.FromClientSecretFormParam.client_secret</Condition>
                </Step>
                <!-- Verify the client has sent a valid redirect uri -->
                <Step>
                  <Name>RaiseFault.MissingRedirectUri</Name>
                  <Condition>request.formparam.redirect_uri = null</Condition>
                </Step>
                <Step>
                  <Name>RaiseFault.VerifyRedirectUriFormParam</Name>
                  <Condition>request.formparam.redirect_uri != verifyapikey.VerifyAPIKey.FromClientSecretFormParam.redirection_uris</Condition>
                </Step>
                <!-- Verify the client has sent a authorization code -->
                <Step>
                  <Name>RaiseFault.MissingAuthorizationCode</Name>
                  <Condition>request.formparam.code = null</Condition>
                </Step>
                <Step>
                  <Name>LookupCache.SimulatedAuthCode</Name>
                </Step>
                <!-- Next 3 verify that the request is within the set rate limits -->
                <Step>
                  <Name>AssignMessage.RenameQuotaVarsFromVerifyAPIKeyPolicyFromClientSecretFormParam</Name>
                </Step>
                <Step>
                  <Name>SpikeArrest</Name>
                </Step>
                <Step>
                  <Name>Quota</Name>
                </Step>
                <!-- Next 3 steps allow optional REDUCTION of access_token_expiry and refresh_token_expiry  KVM values
                using _access_token_expiry_ms/_refresh_token_expiry_ms (respectively) form params -->
                <Step>
                  <Name>AssignMessage.AccessTokenExpiryOverride</Name>
                  <Condition>(request.formparam._access_token_expiry_ms != null) and (request.formparam._access_token_expiry_ms LesserThan apigee.access_token_expiry_ms)</Condition>
                </Step>
                <!-- Using JavaScript to evaluate the requested override time, due to apigee conditional failing to evaluate properly -->
                <Step>
                  <Name>JavaScript.CalculateRefreshTokenOverride</Name>
                  <Condition>request.formparam._refresh_token_expiry_ms != null</Condition>
                </Step>
                <Step>
                  <Name>AssignMessage.RefreshTokenExpiryOverride</Name>
                  <Condition>(apigee.can_override_refresh_token != null) and (apigee.can_override_refresh_token = true)</Condition>
                </Step>
                <Step>
                  <Name>AssignMessage.DummySecretKey</Name>
                </Step>
                <Step>
                  <Name>GenerateJWT.SimulatedAuth</Name>
                </Step>
                <Step>
                  <Name>DecodeJWT.FromGeneratedIdTokenSimulatedAuth</Name>
                </Step>
                <Step>
                  <Name>OAuthV2.GenerateAccessTokenSimulatedAuth</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Name>AssignMessage.GenerateTokenResponseSimulatedAuth</Name>
                </Step>
                <Step>
                    <Name>AssignMessage.SetCorsHeaders</Name>
                </Step>
            </Response>
            <Condition>(identity_service.simulated_idp Is "true") and (proxy.pathsuffix MatchesPath "/token") and (request.verb = "POST") and (request.formparam.grant_type = "authorization_code")</Condition>
          </Flow>
          <Flow name="Flow.PostRefreshToken">
            <Description>OAuth Refresh Token Endpoint</Description>
            <Request>
              <!-- Verify the Client Application using both client_id and client_secret form params -->
              <Step>
                <Name>VerifyAPIKey.FromClientSecretFormParam</Name>
              </Step>
              <Step>
                <Name>RaiseFault.MissingClientSecret</Name>
                <Condition>request.formparam.client_secret = null</Condition>
              </Step>
              <Step>
                <Name>RaiseFault.InvalidClientSecret</Name>
                <Condition>request.formparam.client_secret != verifyapikey.VerifyAPIKey.FromClientSecretFormParam.client_secret</Condition>
              </Step>
              <!-- Verify the refresh token is present in the request -->
              <Step>
                <Name>RaiseFault.MissingRefreshToken</Name>
                <Condition>request.formparam.refresh_token = null</Condition>
              </Step>
              <!-- Next 5 steps allow optional REDUCTION of access_token_expiry, refresh_token_expiry, and refresh_token_validity KVM values
              using _access_token_expiry_ms/_refresh_token_expiry_ms/_refresh_tokens_validity_ms (respectively) form params -->
              <Step>
                <Name>AssignMessage.AccessTokenExpiryOverride</Name>
                <Condition>(request.formparam._access_token_expiry_ms != null) and (request.formparam._access_token_expiry_ms LesserThan apigee.access_token_expiry_ms)</Condition>
              </Step>
              <!-- Using JavaScript to evaluate the requested override time, due to apigee conditional failing to evaluate properly -->
              <Step>
                <Name>JavaScript.CalculateRefreshTokenOverride</Name>
                <Condition>request.formparam._refresh_token_expiry_ms != null</Condition>
              </Step>
              <Step>
                <Name>AssignMessage.RefreshTokenExpiryOverride</Name>
                <Condition>(apigee.can_override_refresh_token != null) and (apigee.can_override_refresh_token = true)</Condition>
              </Step>
              <!-- Using JavaScript to evaluate the requested validity override time, due to apigee conditional failing to evaluate properly -->
              <Step>
                <Name>JavaScript.CalculateRefreshTokenValidityOverride</Name>
                <Condition>request.formparam._refresh_tokens_validity_ms != null</Condition>
              </Step>
              <Step>
                <Name>AssignMessage.RefreshTokensValidityOverride</Name>
                <Condition>(apigee.can_override_refresh_token_validity != null) and (apigee.can_override_refresh_token_validity = true)</Condition>
              </Step>
              <!-- Next 3 verify that the request is within the set rate limits -->
              <Step>
                <Name>AssignMessage.RenameQuotaVarsFromVerifyAPIKeyPolicyFromClientSecretFormParam</Name>
              </Step>
              <Step>
                <Name>SpikeArrest</Name>
              </Step>
              <Step>
                <Name>Quota</Name>
              </Step>
              <Step>
                <Name>OAuthV2.GenerateRefreshToken</Name>
              </Step>
              <Step>
                <Name>JavaScript.CalculateAccessTokenAge</Name>
              </Step>
              <Step>
                <Name>RaiseFault.TokenRefreshTimelimitExceeded</Name>
                <Condition>private.apigee.access_token_age_ms > apigee.refresh_tokens_validity_ms</Condition>
              </Step>
            </Request>
            <Response>
                <Step>
                  <Name>AssignMessage.GenerateRefreshTokenResponse</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/token") and (request.verb = "POST") and (request.formparam.grant_type = "refresh_token")</Condition>
        </Flow>
        <Flow name="Flow.GetCallback">
            <Description>Flow to catch the Code response</Description>
            <Request>
                <Step>
                  <Name>RaiseFault.Unauthorized</Name>
                  <Condition>request.queryparam.client_id NotEquals private.apigee.client_id</Condition>
                </Step>
                <Step>
                  <Name>LookupCache.OriginalClientInfo</Name>
                </Step>
                <Step>
                  <Name>ExtractVariables.ReadCacheJson</Name>
                </Step>
                <Step>
                  <Name>InvalidateCache.OriginalClientInfo</Name>
                </Step>
                <Step>
                  <Name>VerifyAPIKey.FromJSON</Name>
                </Step>
                <Step>
                  <Name>AssignMessage.RenameQuotaVarsFromVerifyAPIKeyPolicyFromJSON</Name>
                </Step>
                <Step>
                  <Name>SpikeArrest</Name>
                </Step>
                <Step>
                  <Name>Quota</Name>
                </Step>
                <Step>
                  <Name>OAuthV2.GenerateAuthCode</Name>
                </Step>
            </Request>
            <Response>
              <!-- Re-create the redirect so scope query param isn't included -->
              <Step>
                <Name>AssignMessage.AuthCodeRedirect</Name>
              </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/callback") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="Flow.SimulatedUserAuth">
          <Description>Provide a simulated user authorization interaction - Display login dialogue</Description>
          <Request>
            <!-- Check the redirect_uri and client_id. Although we generate the redirect to this URL, an app developer might get creative somehow
            and we need to illustrate that what they are doing will break the authentication. -->
            <Step>
              <Name>RaiseFault.Unauthorized</Name>
              <Condition>(request.queryparam.client_id NotEquals private.apigee.client_id) or (request.queryparam.redirect_uri NotEquals private.apigee.redirect_uri)</Condition>
            </Step>
            <Step>
              <Name>AssignMessage.SimulatedAuthPage</Name>
            </Step>
          </Request>
          <Condition>(identity_service.simulated_idp Equals "true") and (proxy.pathsuffix MatchesPath "/simulated_auth") and (request.verb Equals "GET")</Condition>
        </Flow>
        <Flow name="Flow.SimulatedUserAuthPost">
          <Description>Provide a simulated user authorization interaction - Process login</Description>
          <Request>
            <Step>
              <Name>AssignMessage.GenerateSimulatedAuthCode</Name>
            </Step>
            <Step>
              <Name>PopulateCache.SimulatedAuthCode</Name>
            </Step>
            <Step>
              <Name>AssignMessage.RedirectToApigeeCallback</Name>
            </Step>
          </Request>
          <Condition>(identity_service.simulated_idp Equals "true") and (proxy.pathsuffix MatchesPath "/simulated_auth") and (request.verb Equals "POST")</Condition>
        </Flow>
        <Flow name="Flow.GetUserInfo">
          <Description/>
          <Request>
            <Step>
              <Name>OAuthV2.VerifyAccessToken</Name>
            </Step>
            <Step>
              <Name>SpikeArrest</Name>
            </Step>
            <Step>
              <Name>Quota</Name>
            </Step>
            <Step>
              <Name>AssignMessage.SetAuthorizationHeader</Name>
            </Step>
          </Request>
          <Response/>
          <Condition>(identity_service.simulated_idp IsNot "true") and (proxy.pathsuffix MatchesPath "/userinfo") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="Flow.GetUserInfoSimulatedAuth">
          <Description/>
          <Request>
            <Step>
              <Name>OAuthV2.VerifyAccessToken</Name>
            </Step>
            <Step>
              <Name>SpikeArrest</Name>
            </Step>
            <Step>
              <Name>Quota</Name>
            </Step>
            <Step>
              <Name>AssignMessage.GenerateUserinfoResponseSimulatedAuth</Name>
            </Step>
          </Request>
          <Response/>
          <Condition>(identity_service.simulated_idp Equals "true") and (proxy.pathsuffix MatchesPath "/userinfo") and (request.verb = "GET")</Condition>
        </Flow>
        <Flow name="Flow.OptionsCors">
            <Description/>
            <Request/>
            <Response>
                <Step>
                    <Name>AssignMessage.SetCorsHeaders</Name>
                </Step>
            </Response>
            <Condition>request.verb == "OPTIONS" AND request.header.origin != null AND request.header.Access-Control-Request-Method != null</Condition>
        </Flow>
        <Flow name="Flow.PostTokenInvalidGrantType">
          <Request>
            <Step>
              <Name>RaiseFault.UnsupportedGrantType</Name>
            </Step>
          </Request>
          <Condition>((proxy.pathsuffix MatchesPath "/token") and (request.verb Equals "POST") and (request.formparam.grant_type IsNot null)</Condition>
        </Flow>
        <Flow name="Flow.PostTokenMissingGrantType">
          <Request>
            <Step>
              <Name>RaiseFault.MissingGrantType</Name>
            </Step>
          </Request>
          <Condition>((proxy.pathsuffix MatchesPath "/token") and (request.verb Equals "POST") and (request.formparam.grant_type Is null)</Condition>
        </Flow>
        <Flow name="Flow.GetAuthorizeUnsupportedHTTPMethod">
          <Request>
            <Step>
              <Name>RaiseFault.UnsupportedAuthorizeHTTPMethod</Name>
            </Step>
          </Request>
          <Condition>(proxy.pathsuffix MatchesPath "/authorize") and (request.verb NotEquals "GET")</Condition>
        </Flow>
        <Flow name="Flow.PostTokenUnsupportedHTTPMethod">
          <Request>
            <Step>
              <Name>RaiseFault.UnsupportedTokenHTTPMethod</Name>
            </Step>
          </Request>
          <Condition>(proxy.pathsuffix MatchesPath "/token") and (request.verb NotEquals "POST")</Condition>
        </Flow>
        <Flow name="Flow.CatchAll">
            <Description/>
            <Request>
                <Step>
                    <Name>RaiseFault.NotFound</Name>
                </Step>
            </Request>
            <Response/>
            <Condition>1=1</Condition>
        </Flow>
    </Flows>
    <PostClientFlow name="PostClientFlow">
      <Response>
        <Step>
          <Name>FlowCallout.LogToSplunk</Name>
        </Step>
      </Response>
    </PostClientFlow>
    <HTTPProxyConnection>
        <!-- Cannot be parameterised / dynamic as it's part of callback URI registered with the identity provider -->
        <BasePath>{{ SERVICE_BASE_PATH }}</BasePath>
        <Properties/>
        <VirtualHost>secure</VirtualHost>
    </HTTPProxyConnection>
    <RouteRule name="NoRoutePing">
        <Condition>(proxy.pathsuffix MatchesPath "/_ping") and ((request.verb = "GET") or (request.verb = "HEAD"))</Condition>
    </RouteRule>
    <RouteRule name="userinfoRoute">
      <Condition>(identity_service.simulated_idp IsNot "true") and (proxy.pathsuffix MatchesPath "/userinfo") and (request.verb = "GET")</Condition>
      <TargetEndpoint>identity-server-DEV</TargetEndpoint>
    </RouteRule>
    <RouteRule name="loopbackRoute"/>
</ProxyEndpoint>
